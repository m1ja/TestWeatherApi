import unittest
from unittest.mock import patch
from aiogram import types
from telegram_bot import (
    start_bot, stop_bot, get_start, get_weather_button, get_location, get_city, start
)

class TestTelegramBot(unittest.TestCase):
    @patch('telegram_bot.Bot.send_message')
    async def test_start_bot(self, mock_send_message):
        bot = types.Bot(token='test_token')
        await start_bot(bot)
        mock_send_message.assert_called_once_with(775860797, text='–±–æ—Ç –∑–∞–ø—É—à–µ–Ω')

    @patch('telegram_bot.Bot.send_message')
    async def test_stop_bot(self, mock_send_message):
        bot = types.Bot(token='test_token')
        await stop_bot(bot)
        mock_send_message.assert_called_once_with(775860797, text='–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

    @patch('telegram_bot.message.answer')
    async def test_get_start(self, mock_answer):
        message = types.Message()
        await get_start(message, None)
        mock_answer.assert_called_once_with(
            '–í—ã –ø–æ–ø–∞–ª–∏ –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥–æ–¥—É‚òÄÔ∏è', reply_markup=...)

    @patch('telegram_bot.message.answer')
    async def test_get_weather_button(self, mock_answer):
        message = types.Message(text='–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É‚òÄÔ∏è')
        await get_weather_button(message, None)
        mock_answer.assert_called_once_with(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ...')

    @patch('telegram_bot.requests.get')
    async def test_get_location(self, mock_get):
        message = types.Message()
        message.location = types.Location(latitude=55.7558, longitude=37.6176)

        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = {
            'city': 'TestCity',
            'temperature': 25,
            'pressure': 760,
            'wind_speed': 5
        }

        with patch('telegram_bot.message.answer') as mock_answer:
            await get_location(message, None)

        mock_answer.assert_called_once_with(
            '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–æ—Ä–æ–¥–µ TestCity üåá\n'
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç 25 üå°\n'
            '–î–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —É–ª–∏—Ü–µ 760 –º–º —Ä—Ç.—Å—Ç ‚õÖÔ∏è\n'
            '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ 5 üí®'
        )

    @patch('telegram_bot.requests.get')
    async def test_get_city(self, mock_get):
        message = types.Message(text='TestCity')

        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = {
            'city': 'TestCity',
            'temperature': 25,
            'pressure': 760,
            'wind_speed': 5
        }

        with patch('telegram_bot.message.answer') as mock_answer:
            await get_city(message, None)

        mock_answer.assert_called_once_with(
            '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–æ—Ä–æ–¥–µ TestCity üåá\n'
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç 25 üå°\n'
            '–î–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —É–ª–∏—Ü–µ 760 –º–º —Ä—Ç.—Å—Ç ‚õÖÔ∏è\n'
            '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ 5 üí®'
        )

    # Add similar test functions for other bot functions

if __name__ == '__main__':
    unittest.main()

